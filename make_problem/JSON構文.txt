コンテストのJSON構文について

ここに載せているのはあくまで参考なので、正確な文法はschema.jsonを参照のこと


{
	"contest":{
		"name" : "コンテストの名前",
		"date": {
			"year": 年,
			"month": 月,
			"day": 日
		},
		"start" : 開始時間,
		"end" : 終了時間,
		"question" : [
			問題オブジェクト1,
			問題オブジェクト2,
			問題オブジェクトn
		]

	}
}


問題オブジェクトの構文
{
	"problem" : "問題番号",
	"title" : "タイトル",
	"author" : "作者",
	"time" : "制限時間(秒)",
	"mem" : "制限メモリ(KB)",
	"numOfTestcase" : テストケースの数,
	"precision" : 精度の指定(0なら無指定),
	"statement" : [
		"問題文1(改行は<br>で)",
		画像はオブジェクトとして"{ image :" + パス + "}"で文と文の間に埋め込む
		"問題文2",
		"問題文n"
	],
	"input" : [
		"入力の仕様文1",
		"入力の仕様文2",
		[
			"入力の仕様",
			"例",
			"<i>D F",
			"P<sub><small>1</small></sub>",
			"P<sub><small>2</small></sub>",
			"...",
			"P<sub><small> D</small></sub></i>"
		]
		"入力の仕様文n"
	],
	"constraints" : [
		"入力規則",
		[
			"変数の範囲など",
			"例",
			"1≦<i>D</i>≦2192 (=6*365)",
			"0≦<i>P<sub>i</sub></i>≦10000",
			"0≦<i>F</i>≦10000"
		]
	],

	"output" : [
		"出力の仕様文1",
		"出力の仕様文2",
		"出力の仕様文n"
	],
	"sample" : [
		{
			"sampleIn" : "サンプル入力ファイル1",
			"sampleOut" : "サンプル出力ファイル1",
			"string" : "サンプルの説明(あれば1行で書くことなければ省略可)"
		},
		{
			"sampleIn" : "サンプル入力ファイル2",
			"sampleOut" : "サンプル出力ファイル1",
			"image" : "画像の名前(sample.png)(こちらも一つまで)",
			"string" : "また、画像→文字の順でしか表示されないので注意"
		}
	]

}

また、"question"、"input"、"constraints"、"output"それぞれの文字列配列内に、また文字列配列を上記の"constraints"のように埋め込むことが可能です。
この時、この配列内での文字列は一つの節としてまとめられ、行の終わりには自動的に改行が挿入されます。また、"question"では単純に一つの節となるだけですが、それ以外では枠が作られます。
文章をイタリックにしたり下付き文字にしたりする場合は、通常のhtmlと同様に<i>や<sub>タグを使用してください(タグの閉じ忘れには注意してください)。


実際の例
{
	"contest":{
		"type" : "json",
		"date" : [2014, 12, 27],
		"name" : "choryo t8m8 offline contest",
		"time" : [17, 0, 20, 0],
		"question" : [
			{
				"problem" : "A"	,
				"title" : "読書日記",
				"author" : "unknown",
				"time" : 2,
				"mem" : 65536,
				"numOfTest" : 3,
				"precision" : 0,
				"question" : [
					"Ｋ学院小学校のＲ君は，本を読むのが大好きです．しかしＲ君は，集中力はあるのに，持続力がありません．１日で２０００ページ読む日もあれば，１日に１ページも読まない日もあります．ある日，Ｒ君は１万ページもある本を読み始めました．それに伴い読書日記が付けられ，その日に読んだ最終ページをメモしました．",
					"Ｒ君の担任の先生のＭさんは，Ｒ君がちゃんと勉強しているのかをチェックしなくてはいけませんが，めんどくさいのでそんなことはしません．ページ数Ｎを入力したら，そのページを何日目に読んだかを出力するプログラムを使い，一括で評価しようと思い立ちました．しかしＭ先生は，プログラミングが出来ません．Ｍ先生に変わってプログラムを作ってあげてください．"
				],
				"input" : [
					"入力は以下のような形式で与えられる．",
					[
						"<i>D F",
						"P<sub><small>1</small></sub>",
						"P<sub><small>2</small></sub>",
						"...",
						"P<sub><small> D</small></sub></i>"
					],
					"<i>D</i> は日記を書いた日数（全データ量）<br><i>P<sub>i</sub></i> は<i>i</i> 日目までに読み終わったページ数<br><i>F</i> はチェックするページ番号"
				],
				"constraints" : [
					"入力は全て整数である．",
					[
						"1≦<i>D</i>≦2192 (=6*365)",
						"0≦<i>P<sub>i</sub></i>≦10000",
						"0≦<i>F</i>≦10000"
					]
				],
				"output" : [
					"Fページ目を読み終えたn日目のnを１行で出力せよ．ただし，次の日も同ページまでしか読んでいない場合もありうるが，Fページを読み終えた最短の日数を出力すること．",
					"まだ読み終わっていない場合は，-1を出力せよ．"
				],
				"sample" : [
					{
						"sampleIn" : "Asample_in1.txt",
						"sampleOut" : "Asample_out1.txt",
						"string" : "1日目は0ページ，2日目も0ページ，3日目に90ページまで読み，4日目に102ページまで読んでいるので，「4」を出力すればよい．"
					},
					{
						"sampleIn" : "Asample_in2.txt",
						"sampleOut" : "Asample_out2.txt",
						"string" : "3日目の時点で，すでに3ページ目を読み終えているので「3」を出力すればよい（4だとWA）．"
					}
				]
			},
			{
				"problem" : "B"	,
				"title" : "新しいゲーム",
				"author" : "unknown",
				"time" : 2,
				"mem" : 65536,
				"numOfSample" : 3,
				"precision" : 0,
				"question" : [
					"Ｋ学院大学のＭ君は，新しいゲーム「大乱闘パワフルモンスターオメガルビー」（以後ゲーム）に夢中です．このゲームは，ガチャがとても重要です．ガチャでカードを手に入れて野球をしています．カードは５２種類あり，確率は公表されています．",
					"人生のすべての決定を「損得」でしか判断していないＭくんは，期待値を求めて，所持ポイントより高い場合ガチャをまわすことに決めることにしました．しかしＭくんは，数学もプログラミングも何も出来ません．無能なＭくんに変わってプログラムを作ってあげてください．"
				],
				"input" : [
					"同一行の入力は，全て空白により区切られている．",
					"入力は以下のような形式で与えられる．",
					[
						"<i>M N",
						"S",
						"P<sub>1</sub> P<sub>2</sub> ...P<sub>D</sub> </i>"
					]

				],
				"constraints" : [
					[
						"M：現在の所持金 0≦<i>M</i>≦10000 ",
						"N：カードの枚数 1≦N≦1000",
						"S：カードの種類の文字列 1000文字までの",
						"a , b , ... y , z , A , B , ... Y , Z がランダムで含まれている枚数分並んでいる．空白はない．",
						"<i>P<sub>i</sub></i>：カードの価値 0≦P_i≦10000 ただし，出現する文字列のみ",
						"a , b , ... y , z , A , B , ... Y , Z の順番通りにカードの価値が空白により区切られて並んでいる．"
					]
				],
				"output" : [
					"Answer",
					"Answer には，Yes か No が入る．期待値がMの値よりも高い場合Yesを，そうでない場合Noを出力すればよい．"
				],
				"sample" : [
					{
						"sampleIn" : "Bsample_in1.txt",
						"sampleOut" : "Bsample_out1.txt",
						"string" : "現在100ポイント持っており，カードは10枚出現する．<br>Ａの確率が5/10Ｂの確率が3/10<br>Ｃの確率が2/10<br>であり，期待値を求めると<br>期待値＝50*5/10+100*3/10+300*2/10=115<br>となり，現在の所持ポイントより高いのでYesを出力する．"
					},
					{
						"sampleIn" : "Bsample_in2.txt",
						"sampleOut" : "Bsample_out2.txt",
						"string" : "75*3/10+80*1/10+90*1/10+95*3/10+100*1/10+105*1/10+110*1/10<br>=99.5となり，現在の所持ポイント100よりも少ないのでNoと出力する．"
					}
				]
			},
			{
				"problem" : "B"	,
				"title" : "ブラック企業",
				"author" : "unknown",
				"time" : 2,
				"mem" : 65536,
				"numOfSample" : 3,
				"precision" : 0,
				"question" : [
					"ＫＧＩ株式会社は，ブラック企業です．上司は部下へ，部下はその部下へ，その部下はそのまた部下へ・・・と仕事が投げられて行き，最終的に一番下の部下が全部の仕事をやらなければなりません．",
					"一番下の部下が，唯一仕事をしなくて済む方法があります．それはお金を渡す事です．お金を渡すことにより，仕事が上から下へと投げられるのを打ち切ることが出来ます．どの上司と部下の関係においても，仕事を投げさせないために必要な金額が決まっています．",
					"新入社員のＭ君は，仕事をしたくないので，全ての仕事が投げられてこないように，お金を上司たちに渡すことにしました．全ての仕事を打ち切るために，支払わなければならない最低金額を求めてください．"
				],
				"input" : [
					"社員の関係が木の構造で与えられ，この木の各頂点は社員を表し，各頂点は仕事の量（整数）を持っている．一人の上司は、一人の部下に繋がっている（循環することはない）．最初の時点では，新入社員に仕事は与えられていない．",
					"入力は以下のような形式で与えられる．",
					[
						"<i>N",
						"C<sub><small>1</small></sub> C<sub><small>2</small></sub>...C<sub><small>n</small></sub>",
						"U<sub><small>1</small></sub> V<sub><small>1</small></sub> P<sub><small>1</small></sub>",
						"U<sub><small>2</small></sub> V<sub><small>2</small></sub> P<sub><small>2</small></sub>",
						"... ... ...",
						"U<sub><small>n-1</small></sub> V<sub><small>n-1</small></sub> P<sub><small>n-1</small></sub></i>"
					],
					"<i>N</i>は社員の関係を表す木に含まれる頂点の数である．各頂点には0…N-1の番号が振られ，0番目の頂点が新入社員Ｍの事を示す．２行目の <i>C<sub>i</sub></i>  は，各頂点（社員）に振り分けられている仕事の数である．2+i行目の<i>U<sub>i</sub> V<sub>i</sub> P<sub>i</sub></i> は，木に含まれる辺の情報である．<i>U<sub>i</sub> V<sub>i</sub></i>は辺が結ぶ２頂点の番号であり，<i>P<sub>i</sub></i> は，その辺を打ち切るために必要な金額である．"
				],
				"constraints" : [
					"入力は全て整数である．",
					"与えられるグラフは木である．",
					[
						"2≦<i>N</i>≦1000",
						"0≦ <i>C<sub>i</sub></i>≦1000",
						"0≦ <i>U<sub>i</sub></i> ,<i>V<sub>i</sub></i> ≦N",
						"1≦ <i>P<sub>i</sub></i> ≦1000"					
					]

				],
				"output" : [
					"全ての仕事を打ち切るために必要な最低金額を１行で出力せよ．"
				],
				"sample" : [
					{
						"sampleIn" : "Csample_in1.txt",
						"sampleOut" : "Csample_out1.txt",
						"image" : "B1.png",
						"string" : "上図のように，頂点０と１をつなぐ辺を切れば，全ての仕事を打ち切ることが出来る．"
					},
					{
						"sampleIn" : "Csample_in2.txt",
						"sampleOut" : "Csample_out2.txt",
						"image" : "B2.png",
						"string" : "頂点１と２，１と３，１と４をつなぐ辺を３本切れば，最少金額で仕事を全て打ち切ることが出来る．また，頂点０と１をつなぐ辺を切ることで，全ての仕事を打ち切ることができるが，これにはコストが４かかってしまう．"
					}
				]
			}
		]

	}
}