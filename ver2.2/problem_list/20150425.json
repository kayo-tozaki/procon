{
  "contest": {
    "name": "KogCoder closed online contest",
    "date": {
      "year": 2015,
      "month": 4,
      "day": 25
    },
    "start": 17,
    "end": 19,
    "question": [
      {
        "problem": "A",
        "title": "%%%",
        "author": "ry0u_yd",
        "time": 2,
        "mem": 65536,
        "numOfTestcase": 3,
        "precision": 0,
        "statement": [
          " 学内プログラミングコンテストへようこそ！<br>競技プログラミングをみんなでやっていこう！",
          " AをBを割った余りを求めて欲しいのです.<br>C言語において余りを求める計算には&quot;%&quot;演算子が用いれらます.<br>よってC言語でAをBで割った余りを求めたいときには以下の様に書きます.",
          " A % B <br><br>具体例を挙げると<br>5 % 3 = 2<br>6 % 3 = 0<br>10 % 11 = 10<br>これにより偶奇判定を&quot;%2&quot;よって判断することはしばしばあります.",
          " これで%演算子の使い方が分かりました.それではAをBで割った余りを出力してください."
        ],
        "input": [
          "入力は以下のような形式で与えられます.",
          [
            "<i>A</i> <i>B</i>"
          ]
        ],
        "constraints": [
          "<i>A</i>:<i>0≦A≦100</i><br><i>B</i>:<i>0≦B≦100</i>"
        ],
        "output": [
          [
            "<i>r</i>"
          ],
          "r:AをBで割った余りを出力してください. 出力の最後には改行を出力してください."
        ],
        "sample": [
          {
            "sampleIn": "Sample1_in_1.txt",
            "sampleOut": "Sample1_out_1.txt",
            "string": "これは上記の例です"
          },
          {
            "sampleIn": "Sample1_in_2.txt",
            "sampleOut": "Sample1_out_2.txt"
          },
          {
            "sampleIn": "Sample1_in_3.txt",
            "sampleOut": "Sample1_out_3.txt"
          }
        ]
      },
      {
        "problem": "B",
        "title": "8乗6倍バズーカ",
        "author": "choll",
        "time": 2,
        "mem": 65536,
        "numOfTestcase": 5,
        "precision": 1,
        "statement": [
          " 勇者を目指して日々特訓中のMくんは，必殺技の「８乗６倍バズーカ」を習得中です．<br>この必殺技の威力は，その時の精神力に比例し，関数で表すことできます．<br>F(精神力) = (精神力^8 + 6*精神力 ) ÷ 2<br>と定義されます.",
          " Mくんは，精神力を十分に高めることができませんが，少しずつ「８乗６倍バズーカ」を打てるようになってきました．<br>精神力が与えられるので「８乗６倍バズーカ」の威力を求めてください."
        ],
        "input": [
          "入力は以下のような形式で与えられます.",
          [
            "<i>a</i>"
          ]
        ],
        "constraints": [
          "<i>a</i>:<i>0≦a≦50</i>の整数"
        ],
        "output": [
          [
            "<i>n</i>"
          ],
          "n:nは小数点以下1桁まで正確に出力すること."
        ],
        "sample": [
          {
            "sampleIn": "Sample2_in_1.txt",
            "sampleOut": "Sample2_out_1.txt"
          },
          {
            "sampleIn": "Sample2_in_2.txt",
            "sampleOut": "Sample2_out_2.txt"
          }
        ]
      },
      {
        "problem": "C",
        "title": "一番強いのは誰だ！？",
        "author": "ry0u_yd",
        "time": 2,
        "mem": 65536,
        "numOfTestcase": 3,
        "precision": 0,
        "statement": [
          " プログラミングコンテストではしばしばレートと呼ばれる格付けのようなものがあります.<br>普段の競技ではレートが下の人が上の人に勝つことはそのコンテストの頑張りしだいです.しかし今から行われるコンテストではレートは絶対的なものとして扱われます.レートがAの人はレートがA未満の人よりも必ず強いとします.また与えられるレートに同一の値は無いことが保証されています.",
          " 今のコンテスト人数Nが与えられます.参加者には0〜n-1までの番号が割り振られ,<i>i</i>番目の人のレートが<i>a<sub>i</sub></i>とします.このN人の中で一番強い人の番号を出力してください.またここでいう&quot;強い&quot;とは上で説明した意味だけを持ち,それ以外を表しません."
        ],
        "input": [
          "入力は以下のような形式で与えられます.",
          [
            "<i>N</i>",
            "<i>a<sub>0</sub></i> <i>a<sub>1</sub></i> ... <i>a<sub>n-1</sub></i>"
          ]
        ],
        "constraints": [
          "<i>N</i>:<i>0≦N≦100</i><br><i>a<sub>i</sub></i>:<i>0≦a<sub>i</sub>≦100</i>"
        ],
        "output": [
          [
            "i"
          ],
          "i:一番強い人の番号を出力してください.また出力の最後に改行を出力してください."
        ],
        "sample": [
          {
            "sampleIn": "Sample3_in_1.txt",
            "sampleOut": "Sample3_out_1.txt",
            "string": "これは上記の例です"
          },
          {
            "sampleIn": "Sample3_in_2.txt",
            "sampleOut": "Sample3_out_2.txt"
          }
        ]
      },
      {
        "problem": "D",
        "title": "ククサーチ",
        "author": "choll",
        "time": 2,
        "mem": 65536,
        "numOfTestcase": 5,
        "precision": 0,
        "statement": [
          " 今年も工学院小学校に，九九を勉強する季節がやってきました．小学2年生で九九を勉強します．小学2年生のおバカなＭ君は歩きながら九九を暗唱し，頑張って覚えようとしていますが，なかなか覚えられません．一方で，同じ通学路で通っている小学1年生の天才Ｒ君は，9×9ではなく，10000×10000までの九九を暗唱できてしまいます.",
          " 嫉妬しまくりのMくんは，適当に整数<i>a</i>をいい，その数が10000×10000までの九九の積としてあり得る数なのか，そうでないのかを答えさせるクイズをRくんに出します．<br> Rくんは，「含まれてるよ」or「含まれてないよ」とすぐ答えを出しますが，結局Mくんは，その答えがあっているのかどうか判断することができません.",
          " Ｍ君が言った整数が10000×10000までの九九の答えに含まれるかどうか判定するプログラムを作ってください."
        ],
        "input": [
          "入力は以下のような形式で与えられます.",
          [
            "<i>a</i>"
          ]
        ],
        "constraints": [
          "<i>a</i>:<i>0≦a≦10^8</i>の整数"
        ],
        "output": [
          [
            "<i>s</i>"
          ],
          "s:含まれている場合は&quot;yes&quot;,含まれていない場合は&quot;no&quot;を出力してください.また出力の最後には改行をしてください."
        ],
        "sample": [
          {
            "sampleIn": "Sample4_in_1.txt",
            "sampleOut": "Sample4_out_1.txt",
            "string": "これは上記の例です"
          },
          {
            "sampleIn": "Sample4_in_2.txt",
            "sampleOut": "Sample4_out_2.txt"
          },
          {
            "sampleIn": "Sample4_in_3.txt",
            "sampleOut": "Sample4_out_3.txt"
          }
        ]
      },
      {
        "problem": "E",
        "title": "プライムフォーミュラ",
        "author": "choll",
        "time": 2,
        "mem": 65536,
        "numOfTestcase": 5,
        "precision": 0,
        "statement": [
          " 素数が大好きなMくんは，素数を見るだけで幸せな気分になります．つまりある数<i>a</i>が与えられたとき,できるだけ多くの素数の和に変換することで,よりMくんを幸せにすることができます.",
          " Mくんを可能な限り幸せにするために,ある数<i>a</i>できるだけ多くの素数を使った和の式にしてください．",
          "式のルール<br><ul><li>使用する素数を小さい順に並べる<li>素数 半角スペース 半角プラス記号 半角スペース 素数の表示をすること.<li>式の最後にのみ改行(途中の不要な改行はWAとされます.)</ul><br>(例) P1 + P2 + P3 + ... + Pn"
        ],
        "input": [
          "入力は以下のような形式で与えられます.",
          [
            "<i>a</i>"
          ]
        ],
        "constraints": [
          "<i>a</i>:<i>2≦a≦1000000</i>の整数"
        ],
        "output": [
          [
            "<i>s</i>"
          ],
          "s:式のルールを満たすような文字列."
        ],
        "sample": [
          {
            "sampleIn": "Sample5_in_1.txt",
            "sampleOut": "Sample5_out_1.txt",
            "string": "これは上記の例です"
          },
          {
            "sampleIn": "Sample5_in_2.txt",
            "sampleOut": "Sample5_out_2.txt"
          },
          {
            "sampleIn": "Sample5_in_3.txt",
            "sampleOut": "Sample5_out_3.txt"
          }
        ]
      },
      {
        "problem": "F",
        "title": "PassWord",
        "author": "ry0u_yd",
        "time": 2,
        "mem": 65536,
        "numOfTestcase": 4,
        "precision": 0,
        "statement": [
          " R君は物忘れがとても激しいです.ある日,お金を引き出そうと自分の金庫を開けようとしたら,Passwardを忘れてしまったため,金庫を開けることができませんでした.",
          " しかしR君にとってこのようなことは日常茶飯事です.いつ忘れても大丈夫なようにしっかり準備がしてあるのです.その準備とは金庫の横においてある,ある文字列Sと一枚の手紙です.R君はこの情報からある操作を文字列Sに施すことで金庫をPasswardを得ることができるのを知っています.",
          " 手紙にはn個のxが書いてあります.文字列Sのx〜|S|-x+1を反転した新たな文字列を得ます(|S|とは文字列|S|の長さを表す).この操作をn回繰り返した最後の文字列が金庫のPasswardなのです！",
          " R君の金庫のPasswardを出力してください."
        ],
        "input": [
          "入力は以下のような形式で与えられます.",
          [
            "<i>S</i>",
            "<i>N</i>",
            "<i>x<sub>0</sub></i> <i>x<sub>1</sub></i> ... <i>x<sub>n-1</sub></i>"
          ]
        ],
        "constraints": [
          "<i>S</i>:<i>0≦|S|≦10^7</i><br><i>N</i>:<i>0≦N≦10^7</i><br><i>x<sub>i</sub></i>:<i>0≦x<sub>i</sub>≦|S|/2+1</i>"
        ],
        "output": [
          [
            "s"
          ],        
          "s:R君の金庫のPasswardを出力してください.出力の最後に改行を出力してください."
        ],
        "sample": [
          {
            "sampleIn": "Sample6_in_1.txt",
            "sampleOut": "Sample6_out_1.txt"
          },
          {
            "sampleIn": "Sample6_in_2.txt",
            "sampleOut": "Sample6_out_2.txt"
          },
          {
            "sampleIn": "Sample6_in_3.txt",
            "sampleOut": "Sample6_out_3.txt"
          }
        ]
      },
      {
        "problem": "G",
        "title": "分解作業",
        "author": "ry0u_yd",
        "time": 2,
        "mem": 65536,
        "numOfTestcase": 5,
        "precision": 0,
        "statement": [
          " 現在R君はN個のパーツを手にかかえています.パーツx<sub>i</sub>はそれぞれコストというパラメーターを持っています.またこれらのパーツはx<sub>s</sub>はx<sub>t</sub>と連結しています.",
          " R君はパーツを見ると分解したくてたまりません.ここでいう分解とは連結しているパーツを1つ1つのパーツに分ける,と定義されます.早速分解したいと考えたが,分解するにはそれ相応のコストがかかります.",
          " 分解について詳しく説明します.<br>パーツx<sub>i</sub>を分解するにはx<sub>i</sub>に直接隣接している全てのx<sub>j</sub>のコストの和がかかります.<br>つまり他のパーツをまたいでつながっていてもそのコストはかからないし,またx<sub>i</sub>自身のコストもかかりません. ",
          " 分解の方法が上記で分かりました.R君はパーツを全て分解したいと考えます.しかしR君は非常に怠け者です.「楽をしたい,楽をしたい」としきりに言いますが自分で考えることはしないようです.分解にかかるコストの最小値を求めてR君の負担を減らしてあげてください."
        ],
        "input": [
          "入力は以下のような形式で与えられます.",
          [
            "<i>N</i>",
            "<i>x<sub>0</sub></i> <i>x<sub>1</sub></i> ... <i>x<sub>n-1</sub></i>",
            "<i>M</i>",
            "<i>s<sub>0</sub></i> <i>t<sub>0</sub></i>",
            "<i>s<sub>1</sub></i> <i>t<sub>1</sub></i>",
            "...",
            "<i>s<sub>m-1</sub></i> <i>t<sub>m-1</sub></i>"
          ]
        ],
        "constraints": [
          "<i>N</i>:パーツの個数(<i>0≦N≦1000)</i> <br><i>x<sub>i</sub></i>:<i>i</i>番目のパーツのコスト <br><i>M</i>:パーツ同士の繋がってるペアの個数 <br><i>s<sub>i</sub> <i>t<sub>i</sub></i>:<i>s</i>番目のパーツと<i>t</i>番目のパーツがつながっていることをしめす."
        ],
        "output": [
          "分解にかかる最小のコスト"
        ],
        "sample": [
          {
            "sampleIn": "Sample7_in_1.txt",
            "sampleOut": "Sample7_out_1.txt",
            "string": "最初にパーツ4を分解します.これにはコスト10かかり,残りのパーツは1，2，3の3つです.<br>次にパーツ3を分解します.これはコスト20がかかります.<br>次にパーツ2を分解します.これはコスト10かかります.<br>最後にパーツ1を分解します.隣接しているパーツがないのでこれはコスト0です.<br> <br>よって10 + 20 + 10 + 0 = 40より40を出力します."
          },
          {
            "sampleIn": "Sample7_in_2.txt",
            "sampleOut": "Sample7_out_2.txt"
          }
        ]
      },
      {
        "problem": "H",
        "title": "大脱走",
        "author": "choll_bo",
        "time": 2,
        "mem": 65536,
        "numOfTestcase": 6,
        "precision": 0,
        "statement": [
          " 日本のとあるT都の都庁はツインタワーです.A塔とB塔があり,この二つの塔を結ぶ渡り廊下が1本かかっています.この渡り廊下は幅１００メートル,長さLメートルの巨大な廊下であり,1メートル四方のタイルで敷き詰められています.また,この渡り廊下には壮大な細工が施されており,装置が起動してから１秒間に１タイルが抜け落ちます.上下左右に隣り合うタイルが抜け落ちた状態であれば接続していると考えたときに,左端から右端まで接続した場合、A塔からB塔までいけなくなります。　（壁伝いやジャンプすればいけるじゃん！ってことは考えてはいけません",
          " 大泥棒のMは,A塔に眠る重要な秘密を出来るだけ多く盗み出し,秘密結社に情報をリークしたいと考えています.あらかじめ入手しておいたタイルが抜け落ちるタイミングが示されたタイムテーブルには,何タイルが落ちるのかと,落ちる順番に座標が与えられます.",
          " 大泥棒のMはより多くの情報を盗み出すために,出来るだけ長い時間A塔に滞在したいと考えています.入手したタイムテーブルを基に何秒間A塔にいれられるかを求めてください."
        ],
        "input": [
          "入力は以下のような形式で与えられます.",
          [
            "<i>L</i>",
            "<i>N</i>",
            "<i>x<sub>0</sub></i> <i>y<sub>0</sub></i>",
            "<i>x<sub>1</sub></i> <i>y<sub>1</sub></i>",
            "...",
            "<i>x<sub>n-1</sub></i> <i>y<sub>n-1</sub></i>"
          ]
        ],
        "constraints": [
          "<i>L</i>:渡り廊下の長さ(<i>1≦L≦10^4</i>) <br><i>N</i>:タイルの落ちる数 (<i>1≦M≦10^6</i>) <br><i>x<sub>i</sub> <i>y<sub>i</sub></i>:落ちるタイルの座標(<i>1≦x<sub>i</sub>≦L</i> <i>1≦y<sub>i</sub>≦100</i>)"
        ],
        "output": [
          [
            "<i>T</i>"
          ],
          "T:A塔にいることの出来る秒数Tを出力してください.また出力の最後には改行してください."
        ],
        "sample": [
          {
            "sampleIn": "Sample8_in_1.txt",
            "sampleOut": "Sample8_out_1.txt"
          }
        ]
      }
    ]
  }
}
